from logger import logger
import requests

import config
from config import *
import function
from modules import PocClustering
from urllib import parse
import subprocess


class Exploit():
    def __init__(self) -> None:
        logger.info("[*]exp start")
        self.poc_file_name = ''
        self.poc = []
        self.location = []
        self.controllable_line = []
        self.fuzz_char = []
        self.unique_id = []
        self.exp_list = []

    def set_poc_file_name(self, filename):
        self.poc_file_name = POC_PATH + filename

    def get_poc_data(self):
        self.poc, self.location, self.controllable_line = function.get_fuzz_info_from_excel(self.poc_file_name)

    def poc_data_clustering(self):
        poc_clustering = PocClustering.PocClustering(self.poc_file_name)
        poc_res = poc_clustering.clustering_method_2()
        for i in poc_res:
            if i[3] not in self.unique_id:
                self.poc.append(parse.quote(i[1]))
                self.unique_id.append(i[3])
                self.location.append(i[4])
                self.fuzz_char.append(str(i[6]))

    def code_wrapper(self):
        self.poc_data_clustering()
        for i in range(0, self.poc.__len__()):
            normal_poc = self.normal_poc(i)
            try:
                r = requests.get(url=function.get_te_url(TE_NAME),
                                 params={'a': parse.unquote(normal_poc)}, timeout=3
                                 )
            except BaseException as e:
                logger.info("Web System Error")
                logger.info(e)
                continue
            cc, cache_file = function.catch_code_coverage_and_filename(r)
            if BASE_TE_PATH not in cache_file:
                cache_file = function.get_te_cache_path(TE_NAME) + cache_file
            else:
                cache_file = cache_file
            self.controllable_line.append(function.get_controllable_line(TE_NAME, cache_file))
            cache_path = cache_file
            for j in self.controllable_line[i]:
                p = subprocess.Popen(['php',
                                      CODE_WRAPPER_PATH,
                                      cache_path,
                                      str(j),
                                      TE_NAME,
                                      normal_poc],
                                     stdout=subprocess.PIPE)
                exp_1 = str(p.stdout.read(), encoding="utf8")
                if "Unknown" not in exp_1 and exp_1 != "":
                    self.exp_list.append(exp_1)
        return self.exp_list

    def normal_poc(self, index):
        if "%" in str(self.fuzz_char[index]):
            self.fuzz_char[index] = parse.unquote(self.fuzz_char[index])
        poc_1 = parse.unquote(self.poc[index])
        if config.TE_NAME == 'mustache':
            poc_1 = poc_1.replace(self.fuzz_char[index], UNIQUE_STRING)
            return poc_1

        if poc_1.find(self.fuzz_char[index]) == 1:
            poc_1 = poc_1.replace(self.fuzz_char[index], UNIQUE_STRING)
        else:
            tmp_poc = poc_1
            poc_1 = tmp_poc[:self.location[index]] + UNIQUE_STRING + tmp_poc[
                                                                     self.location[index] + len(self.fuzz_char[index]):]
        if config.TE_NAME == 'thinkphp' and self.location[index] == 1:
            poc_1 = poc_1.replace(UNIQUE_STRING, '')
            tmp_poc_1 = poc_1
            poc_1 = tmp_poc_1[:self.location[index] + 1] + UNIQUE_STRING + tmp_poc_1[
                                                                           self.location[index] + 1 + len(
                                                                               self.fuzz_char[index]):]
            self.location[index] = 2
        return poc_1

    def get_exp(self):
        for i in range(0, self.poc.__len__()):
            logger.info(self.poc[i])
            logger.info(self.unique_id[i])
            logger.info(self.location[i])
            logger.info(self.fuzz_char[i])
            logger.info("-" * 50)

    def check_exp(self):
        for i in range(0,self.exp_list.__len__()):
            try:
                r = requests.get(url=function.get_te_url(TE_NAME),
                                 params={'a': parse.unquote(self.exp_list[i])}, timeout=3
                                 )
                if "7.2.34" in r.text:
                    logger.info("=="*50)
                    logger.info("success!\n"+self.exp_list[i])
                else:
                    logger.info("=="*50)
                    logger.info("fail!\n"+self.exp_list[i])
            except BaseException as e:
                logger.info("Web System Error")
                logger.info(e)
                continue


